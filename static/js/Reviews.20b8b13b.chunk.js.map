{"version":3,"file":"static/js/Reviews.20b8b13b.chunk.js","mappings":"4TAOMA,EAAU,mCAGT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6GAEoBC,IAAAA,IAAA,sCAAyCF,IAF7D,cAEGG,EAFH,yBAGIA,EAASC,KAAKC,SAHlB,gCAKHC,QAAQC,IAAR,MALG,gFASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,gGAEoBP,IAAAA,IAAA,gCACIF,EADJ,kBACqBS,IAHzC,cAEGN,EAFH,yBAKIA,EAASC,KAAKC,SALlB,gCAOHC,QAAQC,IAAR,MAPG,gFAWA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,gGAEoBT,IAAAA,IAAA,iBACXS,EADW,oBACGX,EADH,oBAFpB,cAEGG,EAFH,yBAKIA,EAASC,MALb,gCAOHE,QAAQC,IAAR,MAPG,gFAWA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAAiCD,GAAjC,gGAEoBT,IAAAA,IAAA,iBACXS,EADW,4BACWX,EADX,oBAFpB,cAEGG,EAFH,yBAKIA,EAASC,KAAKS,MALlB,gCAOHP,QAAQC,IAAR,MAPG,gFAWA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAkCH,GAAlC,gGAEoBT,IAAAA,IAAA,iBACXS,EADW,4BACWX,EADX,2BAFpB,cAEGG,EAFH,yBAKIA,EAASC,MALb,gCAOHE,QAAQC,IAAR,MAPG,gFA5CPL,IAAAA,SAAAA,QAAyB,gC,mJCYzB,EAlBmB,SAAC,GAAc,IAAZE,EAAW,EAAXA,KACpB,OACE,wBACGA,EAAKW,KAAI,SAAAC,GACR,IAAQL,EAAwBK,EAAxBL,GAAIM,EAAoBD,EAApBC,OAAQC,EAAYF,EAAZE,QACpB,OACE,2BACE,sCACU,0BAAOD,QAEjB,uBAAIC,MAJGP,S,UC2CnB,EA7CgB,WACd,OAA4BQ,EAAAA,EAAAA,UAAS,QAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwBF,EAAAA,EAAAA,UAAS,MAAjC,eAAOf,EAAP,KAAakB,EAAb,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAqBR,OAnBAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGAEIN,EAAU,WAFd,UAGuBP,EAAAA,EAAAA,IAAmBW,GAH1C,UAGUrB,EAHV,wCAKmBwB,QAAQC,OAAO,IAAIC,MAAM,qBAL5C,gDAOMR,EAAQlB,GAPd,QASIiB,EAAU,YATd,kDAWIA,EAAU,YACVG,EAAS,KAAMO,SAZnB,2DADc,uBAAC,WAAD,wBAgBdC,KACC,CAACP,IAEW,SAAXL,GACK,gCAEM,YAAXA,GACK,SAACa,EAAA,EAAD,IAEM,aAAXb,EAC4B,IAAvBhB,EAAK8B,eACV,SAAC,EAAD,CAAY9B,KAAMA,EAAKC,WAEvB,oEAIW,aAAXe,GACK,wBAAKG,SADd","sources":["services/MovieAPI.jsx","components/ReviewList/ReviewList.jsx","view/Reviews.jsx"],"sourcesContent":["// Ключ API (v3 auth)\n// e17c0253c8740e62872e4c433f2396d4\n// Пример API-запроса\n// https://api.themoviedb.org/3/movie/550?api_key=e17c0253c8740e62872e4c433f2396d4\n\nimport axios from 'axios';\n\nconst API_KEY = 'e17c0253c8740e62872e4c433f2396d4';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport async function fetchTrendingMovies() {\n  try {\n    const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchMoviesByName(name) {\n  try {\n    const response = await axios.get(\n      `/search/movie?api_key=${API_KEY}&query=${name}`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchMoviesById(id) {\n  try {\n    const response = await axios.get(\n      `/movie/${id}?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchMoviesActors(id) {\n  try {\n    const response = await axios.get(\n      `/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchMoviesReviews(id) {\n  try {\n    const response = await axios.get(\n      `/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import PropTypes from 'prop-types';\n\nconst ReviewList = ({ data }) => {\n  return (\n    <ul>\n      {data.map(review => {\n        const { id, author, content } = review;\n        return (\n          <li key={id}>\n            <h3>\n              Author: <span>{author}</span>\n            </h3>\n            <p>{content}</p>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default ReviewList;\n\nReviewList.propTypes = {\n  data: PropTypes.array.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMoviesReviews } from '../services/MovieAPI';\nimport ReviewList from '../components/ReviewList/ReviewList';\nimport Loader from '../components/Loader/Loader';\n\nconst Reviews = () => {\n  const [status, setStatus] = useState('idle');\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        setStatus('pending');\n        const data = await fetchMoviesReviews(movieId);\n        if (!data) {\n          return await Promise.reject(new Error('Try another name'));\n        } else {\n          setData(data);\n        }\n        setStatus('resolved');\n      } catch (error) {\n        setStatus('rejected');\n        setError(error.message);\n      }\n    }\n    fetchData();\n  }, [movieId]);\n\n  if (status === 'idle') {\n    return <p>idle</p>;\n  }\n  if (status === 'pending') {\n    return <Loader />;\n  }\n  if (status === 'resolved') {\n    return data.total_results !== 0 ? (\n      <ReviewList data={data.results} />\n    ) : (\n      <p>We don't have any reviews for this movie</p>\n    );\n  }\n\n  if (status === 'rejected') {\n    return <h2>{error}</h2>;\n  }\n};\n\nexport default Reviews;\n"],"names":["API_KEY","fetchTrendingMovies","axios","response","data","results","console","log","fetchMoviesByName","name","fetchMoviesById","id","fetchMoviesActors","cast","fetchMoviesReviews","map","review","author","content","useState","status","setStatus","setData","error","setError","movieId","useParams","useEffect","Promise","reject","Error","message","fetchData","Loader","total_results"],"sourceRoot":""}
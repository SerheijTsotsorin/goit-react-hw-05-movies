{"version":3,"file":"static/js/MoviesPage.0b59d1fa.chunk.js","mappings":"qNAGaA,EAAQC,EAAAA,GAAAA,GAAH,iDAILC,GAAWD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,mG,SC8BrB,EAjCmB,SAAC,GAAqB,IAAnBG,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACrBC,GAAWC,EAAAA,EAAAA,MACjB,MAAa,SAATF,GAEA,iCACE,SAACL,EAAD,8BACA,wBACGI,EAAMI,KAAI,SAAAC,GAAI,OACb,yBACE,UAACP,EAAD,CAAUQ,GAAE,iBAAYD,EAAKE,IAA7B,UACGF,EAAKG,eAAgB,QAFjBH,EAAKE,YAUX,WAATN,GAEA,wBACGD,EAAMI,KAAI,SAAAC,GAAI,OACb,yBACE,SAACP,EAAD,CAAUQ,GAAID,EAAKE,GAAGE,WAAYC,MAAO,CAAET,KAAMC,GAAjD,SACGG,EAAKG,kBAFDH,EAAKE,cAJtB,I,0MCfII,EAAU,mCAGT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6GAEoBC,IAAAA,IAAA,sCAAyCF,IAF7D,cAEGG,EAFH,yBAGIA,EAASC,KAAKC,SAHlB,gCAKHC,QAAQC,IAAR,MALG,gFASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,gGAEoBP,IAAAA,IAAA,gCACIF,EADJ,kBACqBS,IAHzC,cAEGN,EAFH,yBAKIA,EAASC,KAAKC,SALlB,gCAOHC,QAAQC,IAAR,MAPG,gFAWA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+Bd,GAA/B,gGAEoBM,IAAAA,IAAA,iBACXN,EADW,oBACGI,EADH,oBAFpB,cAEGG,EAFH,yBAKIA,EAASC,MALb,gCAOHE,QAAQC,IAAR,MAPG,gFAWA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAiCf,GAAjC,gGAEoBM,IAAAA,IAAA,iBACXN,EADW,4BACWI,EADX,oBAFpB,cAEGG,EAFH,yBAKIA,EAASC,KAAKQ,MALlB,gCAOHN,QAAQC,IAAR,MAPG,gFAWA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAAkCjB,GAAlC,gGAEoBM,IAAAA,IAAA,iBACXN,EADW,4BACWI,EADX,2BAFpB,cAEGG,EAFH,yBAKIA,EAASC,MALb,gCAOHE,QAAQC,IAAR,MAPG,gFA5CPL,IAAAA,SAAAA,QAAyB,gC,kKCNZY,EAAO5B,EAAAA,GAAAA,KAAH,4CAaJ6B,GATQ7B,EAAAA,GAAAA,MAAH,sGASIA,EAAAA,GAAAA,OAAH,+H,SCmBnB,EA9BmB,SAAC,GAAkB,IAAhB8B,EAAe,EAAfA,SACpB,GAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACE,UAACL,EAAD,CAAME,SAVa,SAAAI,GACnBA,EAAIC,iBACsB,KAAtBH,EAAWI,SAGfN,EAASE,GACTC,EAAc,MAId,WACE,kBACEI,SAhBe,SAAAH,GACnBD,EAAcC,EAAII,OAAOC,MAAMC,gBAgB3BD,MAAOP,EACPS,KAAK,OACLC,aAAa,MACbC,WAAS,KAEX,SAACd,EAAD,CAAQY,KAAK,SAAb,wB,oBC8CN,EApEmB,WACjB,OAAwBV,EAAAA,EAAAA,UAAS,MAAjC,eAAOR,EAAP,KAAaqB,EAAb,KACA,GAA4Bb,EAAAA,EAAAA,UAAS,QAArC,eAAOc,EAAP,KAAeC,EAAf,KACA,GAA0Bf,EAAAA,EAAAA,UAAS,IAAnC,eAAO5B,EAAP,KAAc4C,EAAd,KACA,GAA0BhB,EAAAA,EAAAA,UAAS,MAAnC,eAAOiB,EAAP,KAAcC,EAAd,KAEA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACIC,EAAeF,EAAaG,IAAI,SAE9BC,EAAmB,SAAAhC,GACvBqB,EAAQrB,IA4BV,OAzBAiC,EAAAA,EAAAA,YAAU,WAAM,wCAId,oGAEIV,EAAU,WAFd,UAGwBxB,EAAAA,EAAAA,IAAkB+B,GAH1C,UAKyB,KAFflD,EAHV,QAKcsD,OALd,iCAMmBC,QAAQC,OAAO,IAAIC,MAAM,qBAN5C,gDAQMb,EAAS5C,GARf,QAUI2C,EAAU,YAVd,kDAYIA,EAAU,YACVG,EAAS,KAAMY,SAbnB,2DAJc,sBACVtC,GACF6B,EAAgB,CAAEU,MAAOvC,IAkBvB8B,GApBU,mCAqBZU,KAED,CAACxC,EAAM6B,EAAiBC,IAEZ,SAAXR,GACK,SAAC,EAAD,CAAYf,SAAUyB,IAEhB,YAAXV,GAEA,iCACE,SAAC,EAAD,CAAYf,SAAUyB,KACtB,SAACS,EAAA,EAAD,OAIS,aAAXnB,GAEA,iCACE,SAAC,EAAD,CAAYf,SAAUyB,KACtB,SAACU,EAAA,EAAD,CAAW9D,MAAOA,EAAOC,KAAK,cAKrB,aAAXyC,GAEA,iCACE,SAAC,EAAD,CAAYf,SAAUyB,KACtB,wBAAKP,YAJX","sources":["components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","services/MovieAPI.jsx","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","view/MoviesPage.jsx"],"sourcesContent":["import styled from \"styled-components\";\nimport { Link} from \"react-router-dom\";\n\nexport const Title = styled.h1`\n    margin-bottom:30px;\n`;\n\nexport const ItemLink = styled(Link)`\ndisplay: block;\nmargin-bottom: 10px;\ncolor: darkblue;\nfont-size: 18px;\n`;","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Title, ItemLink } from './MovieList.styled';\n\nconst MoviesList = ({ films, from }) => {\n  const location = useLocation();\n  if (from === 'home') {\n    return (\n      <>\n        <Title>Trending Films</Title>\n        <ul>\n          {films.map(film => (\n            <li key={film.id}>\n              <ItemLink to={`movies/${film.id}`}>\n                {film.original_title}{' '}\n              </ItemLink>\n            </li>\n          ))}\n        </ul>\n      </>\n    );\n  }\n  if (from === 'movies') {\n    return (\n      <ul>\n        {films.map(film => (\n          <li key={film.id}>\n            <ItemLink to={film.id.toString()} state={{ from: location }}>\n              {film.original_title}\n            </ItemLink>\n          </li>\n        ))}\n      </ul>\n    );\n  }\n};\n\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  films: PropTypes.array.isRequired,\n  from: PropTypes.string.isRequired,\n};\n","// Ключ API (v3 auth)\n// e17c0253c8740e62872e4c433f2396d4\n// Пример API-запроса\n// https://api.themoviedb.org/3/movie/550?api_key=e17c0253c8740e62872e4c433f2396d4\n\nimport axios from 'axios';\n\nconst API_KEY = 'e17c0253c8740e62872e4c433f2396d4';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport async function fetchTrendingMovies() {\n  try {\n    const response = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchMoviesByName(name) {\n  try {\n    const response = await axios.get(\n      `/search/movie?api_key=${API_KEY}&query=${name}`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchMoviesById(id) {\n  try {\n    const response = await axios.get(\n      `/movie/${id}?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchMoviesActors(id) {\n  try {\n    const response = await axios.get(\n      `/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchMoviesReviews(id) {\n  try {\n    const response = await axios.get(\n      `/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import styled from \"styled-components\";\n\nexport const Form = styled.form`\nmargin: 20px 20px;\n` \n\nexport const Input = styled.input`\n  height: 24px;\n \n  font-size: 20px;\n  &:hover {\n    color: skyblue\n  }\n`\n\nexport const Button = styled.button`\n  font-size: 20px;\n  margin-left: 10px;\n\n  cursor: pointer;\n  &:hover {\n    color: skyblue\n  }\n`","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Button } from './SearchForm.styled';\n\nconst SearchForm = ({ onSubmit }) => {\n  const [searchName, setSearchName] = useState('');\n\n  const handleChange = evt => {\n    setSearchName(evt.target.value.toLowerCase());\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    if (searchName.trim() === '') {\n      return;\n    }\n    onSubmit(searchName);\n    setSearchName('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <input\n        onChange={handleChange}\n        value={searchName}\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n      />\n      <Button type=\"submit\">Search</Button>\n    </Form>\n  );\n};\n\nexport default SearchForm;\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchMoviesByName } from '../services/MovieAPI';\nimport SearchForm from '../components/SearchForm/SearchForm';\nimport MovieList from '../components/MovieList/MovieList';\nimport Loader from '../components/Loader/Loader';\n\nconst MoviesPage = () => {\n  const [name, setName] = useState(null);\n  const [status, setStatus] = useState('idle');\n  const [films, setFilms] = useState([]);\n  const [error, setError] = useState(null);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  let currentQuery = searchParams.get('query');\n\n  const handleFormSubmit = name => {\n    setName(name);\n  };\n\n  useEffect(() => {\n    if (name) {\n      setSearchParams({ query: name });\n    }\n    async function fetchData() {\n      try {\n        setStatus('pending');\n        const films = await fetchMoviesByName(currentQuery);\n\n        if (films.length === 0) {\n          return await Promise.reject(new Error('Try another name'));\n        } else {\n          setFilms(films);\n        }\n        setStatus('resolved');\n      } catch (error) {\n        setStatus('rejected');\n        setError(error.message);\n      }\n    }\n    if (currentQuery) {\n      fetchData();\n    }\n  }, [name, setSearchParams, currentQuery]);\n\n  if (status === 'idle') {\n    return <SearchForm onSubmit={handleFormSubmit} />;\n  }\n  if (status === 'pending') {\n    return (\n      <>\n        <SearchForm onSubmit={handleFormSubmit} />\n        <Loader />\n      </>\n    );\n  }\n  if (status === 'resolved') {\n    return (\n      <>\n        <SearchForm onSubmit={handleFormSubmit} />\n        <MovieList films={films} from=\"movies\" />\n      </>\n    );\n  }\n\n  if (status === 'rejected') {\n    return (\n      <>\n        <SearchForm onSubmit={handleFormSubmit} />\n        <h2>{error}</h2>\n      </>\n    );\n  }\n};\n\nexport default MoviesPage;\n"],"names":["Title","styled","ItemLink","Link","films","from","location","useLocation","map","film","to","id","original_title","toString","state","API_KEY","fetchTrendingMovies","axios","response","data","results","console","log","fetchMoviesByName","name","fetchMoviesById","fetchMoviesActors","cast","fetchMoviesReviews","Form","Button","onSubmit","useState","searchName","setSearchName","evt","preventDefault","trim","onChange","target","value","toLowerCase","type","autoComplete","autoFocus","setName","status","setStatus","setFilms","error","setError","useSearchParams","searchParams","setSearchParams","currentQuery","get","handleFormSubmit","useEffect","length","Promise","reject","Error","message","query","fetchData","Loader","MovieList"],"sourceRoot":""}